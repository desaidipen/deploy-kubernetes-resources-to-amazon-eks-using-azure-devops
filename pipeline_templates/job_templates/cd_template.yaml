jobs:
  - job: "Deploy"
    displayName: "Release: Pull Helm -> Deploy to EKS"
    continueOnError: false
    steps:
      - task: HelmInstaller@1
        displayName: 'Install Helm'
        inputs:
          helmVersionToInstall: ${{ parameters.helmVersion }}

      - task: AWSShellScript@1
        displayName: 'ECR login'
        inputs:
            awsCredentials: ${{ parameters.serviceConnectionName }}
            regionName: ${{ parameters.awsRegion }}
            failOnStandardError: true
            scriptType: 'inline'
            inlineScript: |
              echo 'Using identity'
              aws sts get-caller-identity
              
              ## ECR Login
              export HELM_EXPERIMENTAL_OCI=1

              # Login with Helm
              echo 'HELM Login to ECR...'
              aws ecr get-login-password \
              --region $(awsECRRegion) | helm registry login \
              --username AWS \
              --password-stdin $(repositoryURI) 2>&1

      - task: AWSShellScript@1
        displayName: 'Pull and deploy Helm Chart'
        inputs:
            awsCredentials: ${{ parameters.serviceConnectionName }}
            regionName: ${{ parameters.awsRegion }}
            failOnStandardError: true
            scriptType: 'inline'
            inlineScript: |
              # Confirm caller identity
              echo 'Using identity'
              identity_output=$(aws sts get-caller-identity 2>&1)
              identity_exit_code=$?
              echo "$identity_output"

              if [ $identity_exit_code -ne 0 ]; then
                echo "Error: Failed to confirm identity" >&2
                exit 1
              fi

              # Pull Helm Chart
              echo "Pulling helm chart from $(repositoryURI)"
              helm_pull_output=$(helm pull oci://$(repositoryURI) --version $(helmChartVersion) 2>&1)
              helm_pull_exit_code=$?
              echo "$helm_pull_output"

              if [ $helm_pull_exit_code -ne 0 ]; then
                echo "Error: Failed to pull Helm chart" >&2
                exit 1
              fi

              # Get Kubeconfig
              echo 'Connect to Amazon EKS cluster'
              kubeconfig_output=$(aws eks update-kubeconfig --region $(awsEKSRegion) --name ${{ parameters.awsEKSClusterName }} 2>&1)
              kubeconfig_exit_code=$?
              echo "$kubeconfig_output"

              if [ $kubeconfig_exit_code -ne 0 ]; then
                echo "Error: Failed to update kubeconfig" >&2
                exit 1
              fi

              # Deploy Helm Chart
              echo 'Deploying Helm chart to EKS...'
              chartPackage=${{ parameters.projectName }}-$(helmChartVersion).tgz
              echo "Current directory: $(pwd)"
              echo "Chart package to be installed: $chartPackage"

              echo " ----- 0 >>>>> Dipen Zero"
              helm_upgrade_output=$(helm upgrade \
                --namespace $(K8sNamespace) \
                --create-namespace \
                --install \
                --wait \
                --version $(helmChartVersion) \
                --set application.name=${{ parameters.projectName }} \
                --set image.repository=$(repositoryURI) \
                --set appversion="$(Build.BuildNumber)" \
                --kubeconfig ~/.kube/config \
                ${{ parameters.projectName }} \
                $chartPackage 2>&1)

              echo " ----- 1 >>>>> Dipen One"
              
              helm_upgrade_exit_code=$?
              echo " ----- 2 >>>>> Dipen Two"
              echo "$helm_upgrade_output"
              echo " ----- 3 >>>>> Dipen Three"

              if [ $helm_upgrade_exit_code -ne 0 ]; then
                echo "Error: Helm upgrade failed" >&2
                exit 1
              fi

              echo " ----- 4 >>>>> Dipen Four"

      - task: AWSShellScript@1
        displayName: 'Display Kubectl & Helm Outputs'
        inputs:
          awsCredentials: ${{ parameters.serviceConnectionName }}
          regionName: ${{ parameters.awsRegion }}
          scriptType: 'inline'
          inlineScript: |
            echo "##[section]kubectl get all -n $(K8sNamespace)"
            kubectl get all -n $(K8sNamespace)

            echo "##[section]kubectl get deploy -n $(K8sNamespace)"
            kubectl get deploy -n $(K8sNamespace)

            echo "##[section]kubectl get services -n $(K8sNamespace)"
            kubectl get services -n $(K8sNamespace)

            echo "##[section]kubectl get pods -n $(K8sNamespace)"
            kubectl get pods -n $(K8sNamespace)

            echo "##[section]kubectl describe service webapp -n $(K8sNamespace)"
            kubectl describe service webapp -n $(K8sNamespace)

            echo "##[section]kubectl kubectl get secrets -n $(K8sNamespace)"
            kubectl get secrets -n $(K8sNamespace)

            echo "##[section]helm list -n $(K8sNamespace)"
            helm list -n $(K8sNamespace)

            echo "##[section]helm status ${{ parameters.projectName }} -n $(K8sNamespace)"
            helm status ${{ parameters.projectName }} -n $(K8sNamespace)
